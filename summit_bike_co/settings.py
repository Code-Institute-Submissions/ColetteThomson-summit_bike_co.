"""
Django settings for summit_bike_co project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import dj_database_url
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(n31c)lgm-r)qy#2=!%abh7mk*(0x%57&56(aii+gnlu*2kz*x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "summit-bike-co.herokuapp.com"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # creates callback urls when connecting via social media accs
    'django.contrib.sites',
    'allauth',
    # enables basic user account functions
    'allauth.account',
    # handling of logging in via social media
    'allauth.socialaccount',
    # site apps
    'home',
    'products',
    'bag',
    'checkout',
    'profiles',
    # other
    'crispy_forms',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'summit_bike_co.urls'

# crispy forms with bootstrap version
CRISPY_TEMPLATE_PACK = 'bootstrap4'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'templates', 'allauth'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                # allows allauth to access HTTP request object in templates
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # media context processor (needed for media_url)
                'django.template.context_processors.media',
                # contexts dictionary to be used across all apps
                'bag.contexts.bag_contents',
            ],
            # enables crispy_forms usage in all templates by default
            'builtins': [
                'crispy_forms.templatetags.crispy_forms_tags',
                'crispy_forms.templatetags.crispy_forms_field',
            ]
        },
    },
]
# ensure messages (toasts) are stored in the session (needed for Gitpod)
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

SITE_ID = 1

# temporary log of emails to console (to get confirmation links)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# to allow authentication via username or email
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
# to ensure email is required to register for site
ACCOUNT_EMAIL_REQUIRED = True
# mandatory verification of user email address
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
# user is required to enter email address twice
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
# set minimum username length of 4 characters
ACCOUNT_USERNAME_MIN_LENGTH = 4
# specify a login url
LOGIN_URL = '/accounts/login/'
# redirect user back to homepage after login
LOGIN_REDIRECT_URL = '/'

WSGI_APPLICATION = 'summit_bike_co.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# when app is running on Heroku (where db URL env variable is defined)
# connect to Postgres.  otherwise connect to SQLite

if 'DATABASE_URL' in os.environ:
    DATABASES = {
        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# used to calculate delivery costs
FREE_DELIVERY_THRESHOLD = 1500
STANDARD_DELIVERY_PERCENTAGE = 10
# stripe fields
STRIPE_CURRENCY = 'gbp'
# get '.._keys' from environment, and assign an empty default value
# (to avoid reveal of secret-key and subsequent possible misuse - need
# to keep these out of version control)
STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY', '')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY', '')
STRIPE_WH_SECRET = os.getenv('STRIPE_WH_SECRET', '')
DEFAULT_FROM_EMAIL = 'summitbikeco@example.com'
